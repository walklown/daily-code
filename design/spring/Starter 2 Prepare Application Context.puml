@startuml
'https://plantuml.com/sequence-diagram

autonumber

main -> SpringApplication.run
SpringApplication.run -> SpringApplication.run : context.setEnvironment(environment); 设置环境变量
SpringApplication.run -> SpringApplication.run : createBootstrapContext\n执行SPI注册的BootstrapRegistryInitializer
SpringApplication.run -> SpringApplication.run : getRunListeners 获取spring.factories配置的\nSpringApplicationRunListener类实例
SpringApplication.run -> SpringApplication.run : printBanner
SpringApplication.run -> SpringApplication.run : createApplicationContext\n（策略模式，SERVLET:AnnotationConfigServletWebServerApplicationContext）
SpringApplication.run -> SpringApplication.prepareContext
SpringApplication.prepareContext -> SpringApplication.prepareContext : postProcessApplicationContext\n提供关于名称、类加载、配置转换的扩展
SpringApplication.prepareContext -> SpringApplication.prepareContext : applyInitializers\n执行ApplicationContextInitializer
SpringApplication.prepareContext -> SpringApplication.prepareContext : listeners.contextPrepared\n处理本地事件
SpringApplication.prepareContext -> SpringApplication.prepareContext : bootstrapContext.close\n关闭启动引导，并发送事件
SpringApplication.prepareContext -> SpringApplication.prepareContext : register springApplicationArguments bean and springBootBanner bean
SpringApplication.prepareContext -> SpringApplication.prepareContext : set allowBeanDefinitionOverriding
SpringApplication.prepareContext -> SpringApplication.prepareContext : if lazyInitialization, add LazyInitializationBeanFactoryPostProcessor[BeanFactoryPostProcessor]
SpringApplication.prepareContext -> SpringApplication.prepareContext : getAllSources[primarySource(eg. MyApplication), sources]
SpringApplication.prepareContext -> SpringApplication.load : load
SpringApplication.load -> SpringApplication.load : create BeanDefinitionLoader
SpringApplication.load -> BeanDefinitionLoader.load : load
BeanDefinitionLoader.load -> BeanDefinitionLoader.load : AnnotatedBeanDefinitionReader.register(MyApplication.class)
BeanDefinitionLoader.load --> SpringApplication.load
SpringApplication.load --> SpringApplication.prepareContext
SpringApplication.prepareContext -> SpringApplication.prepareContext : listeners.contextLoaded(context)\n发送contextLoaded事件
SpringApplication.prepareContext --> SpringApplication.run
SpringApplication.run -> SpringApplication.run : refreshContext
SpringApplication.run -> SpringApplication.run : afterRefresh
SpringApplication.run -> SpringApplication.run : listeners.started
SpringApplication.run -> SpringApplication.run : callRunners
SpringApplication.run --> main

@enduml
