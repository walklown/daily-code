@startuml
'https://plantuml.com/sequence-diagram

autonumber

AbstractApplicationContext.refresh -> AbstractApplicationContext.refresh : prepareRefresh
AbstractApplicationContext.refresh -> AbstractApplicationContext.refresh : obtainFreshBeanFactory
AbstractApplicationContext.refresh -> AbstractApplicationContext.refresh : prepareBeanFactory
AbstractApplicationContext.refresh -> AbstractApplicationContext.refresh : postProcessBeanFactory
AbstractApplicationContext.refresh -> AbstractApplicationContext.invokeBeanFactoryPostProcessors : 处理BeanFactoryPostProcessors
AbstractApplicationContext.invokeBeanFactoryPostProcessors -> PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors : 加载BeanFactoryPostProcessors，执行 BeanDefinitionRegistryPostProcessor
PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors -> PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors : BeanFactoryPostProcessors区分 BeanDefinitionRegistryPostProcessor 和 "regularPostProcessors"
PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors -> PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors : 执行实现了 PriorityOrdered 的 BeanDefinitionRegistryPostProcessor\n -> ConfigurationClassPostProcessor(加载BeanDefinition)
PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors -> PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors : 执行实现了 Ordered 的 BeanDefinitionRegistryPostProcessor\n -> null
PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors -> PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors : 执行其他的 BeanDefinitionRegistryPostProcessor\n -> DefaultConfiguringBeanFactoryPostProcessor \n -> IntegrationConfigurationBeanFactoryPostProcessor
PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors -> PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors : 重复一遍上述排序，再按顺序执行一遍新增的 BeanDefinitionRegistryPostProcessor
PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors -> PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors : 执行(BeanDefinitionRegistryPostProcessor)ConfigurationClassPostProcessor\n加载BeanDefinition
PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors -> PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors : 执行所有 BeanDefinitionRegistryPostProcessor 的 postProcessBeanFactory
PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors -> PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors : 执行所有 "regularPostProcessors" 的 postProcessBeanFactory
PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors --> AbstractApplicationContext.invokeBeanFactoryPostProcessors
AbstractApplicationContext.invokeBeanFactoryPostProcessors --> AbstractApplicationContext.invokeBeanFactoryPostProcessors : 补充处理 LoadTimeWeaverAwareProcessor
AbstractApplicationContext.invokeBeanFactoryPostProcessors -> AbstractApplicationContext.refresh
AbstractApplicationContext.refresh -> AbstractApplicationContext.refresh : registerBeanPostProcessors
AbstractApplicationContext.refresh -> AbstractApplicationContext.refresh : initMessageSource
AbstractApplicationContext.refresh -> AbstractApplicationContext.refresh : initApplicationEventMulticaster
AbstractApplicationContext.refresh -> AbstractApplicationContext.refresh : onRefresh
AbstractApplicationContext.refresh -> AbstractApplicationContext.refresh : registerListeners
AbstractApplicationContext.refresh -> AbstractApplicationContext.refresh : finishBeanFactoryInitialization
AbstractApplicationContext.refresh -> AbstractApplicationContext.refresh : finishRefresh

@enduml
